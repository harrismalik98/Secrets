require("dotenv").config(),mongodbURL=process.env.MONGODB_URL;const express=require("express"),app=express(),bodyParser=require("body-parser");app.use(bodyParser.urlencoded({extended:!0}));const ejs=require("ejs");app.set("view engine","ejs"),app.use(express.static("public"));const session=require("express-session"),MongoStore=require("connect-mongo"),passport=require("passport"),passportLocalMongoose=require("passport-local-mongoose"),GoogleStrategy=require("passport-google-oauth20").Strategy,findOrCreate=require("mongoose-findorcreate"),mongoose=require("mongoose");mongoose.connect(mongodbURL),app.use(session({secret:"Our little secret.",resave:!1,saveUninitialized:!1,store:MongoStore.create({mongoUrl:mongodbURL})})),app.use(passport.initialize()),app.use(passport.session());const secretSchema={secret:String},Secret=mongoose.model("Secret",secretSchema),userSchema=new mongoose.Schema({email:String,password:String,googleId:String,secrets:[secretSchema]});userSchema.plugin(passportLocalMongoose),userSchema.plugin(findOrCreate);const User=new mongoose.model("User",userSchema);passport.use(User.createStrategy()),passport.serializeUser(function(e,s){s(null,e.id)}),passport.deserializeUser(function(e,s){User.findById(e,function(e,t){s(e,t)})}),passport.use(new GoogleStrategy({clientID:process.env.CLIENT_ID,clientSecret:process.env.CLIENT_SECRET,callbackURL:"http://localhost:3000/auth/google/secrets"},function(e,s,t,o){User.findOrCreate({googleId:t.id},function(e,s){return o(e,s)})})),app.get("/",function(e,s){s.render("home")}),app.get("/auth/google",passport.authenticate("google",{scope:["profile"]})),app.get("/auth/google/secrets",passport.authenticate("google",{failureRedirect:"/login"}),function(e,s){s.redirect("/secrets")}),app.get("/login",function(e,s){s.render("login")}),app.post("/login",function(e,s){let t=new User({username:e.body.username,password:e.body.password});e.login(t,function(t){t?console.log(t):passport.authenticate("local")(e,s,function(){s.redirect("/secrets")})})}),app.get("/register",function(e,s){s.render("register")}),app.post("/register",function(e,s){let t=e.body.username,o=e.body.password;User.register({username:t,active:!1},o,function(t,o){t?(console.log(t),s.redirect("/register")):passport.authenticate("local")(e,s,function(){s.redirect("/secrets")})})}),app.get("/secrets",function(e,s){User.find({secrets:{$exists:!0,$type:"array",$ne:[]}},function(e,t){e?console.log(e):t&&s.render("secrets",{usersWithSecrets:t})})}),app.get("/logout",function(e,s){e.logout(function(e){e?console.log(e):s.redirect("/")})}),app.get("/submit",function(e,s){e.isAuthenticated()?s.render("submit"):s.redirect("/login")}),app.post("/submit",function(e,s){let t=e.body.secret,o=new Secret({secret:t});User.findById(e.user.id,function(e,t){e?console.log(e):(t.secrets.push(o),t.save(function(){s.redirect("/secrets")}))})}),app.listen(process.env.PORT||3e3,function(){console.log("Server has started successfully.")});